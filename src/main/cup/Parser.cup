package org.example.Parser;

import java_cup.runtime.*;
import org.example.clases.*;


class Parser;

parser code{:
            /**
             * Método al que se llama automáticamente ante algún error sintactico.
             **/
            public void syntax_error(Symbol s){
                System.out.println("Error Sintáctico en la Línea " + (s.left) +
                " Columna "+s.right+ ". No se esperaba este componente: " +s.value+".");
            }

            /**
             * Método al que se llama automáticamente ante algún error sintáctico
             * en el que ya no es posible una recuperación de errores.
             **/
            public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
                System.out.println("Error síntactico irrecuperable en la Línea " +
                (s.left)+ " Columna "+s.right+". Componente " + s.value +
                " no reconocido.");
            }
:};

terminal SELECCIONAR, FILTRAR, INSERTAR, ACTUALIZAR, ASIGNAR, ELIMINAR, EN, VALORES, AND, OR, PALABRA,
         ASTERISCO, MENORIGUALQUE, MAYORIGUALQUE, DIFERENTE, IGUAL, MENORQUE, MAYORQUE, COMA,
         PUNTOYCOMA, DOSPUNTOS, NUMERO, PUNTO, PARENTESISA, PARENTESISC, COMILLAS;

non terminal inicio, sentencia, selec, columnas, seleccion, inser, actua, actualizar, elim,  path, condiciones,
            insercion, condicion, condicionPalabras, asignacion, condicionalNumeros, paraActualizar, diferencia;

            precedence left OR;
            precedence left AND;
            precedence left IGUAL, DIFERENTE, MENORIGUALQUE, MAYORIGUALQUE, MENORQUE, MAYORQUE;

start with inicio;


inicio::= inicio:inic sentencia:senten
   | sentencia ;

sentencia::=  selec {:System.out.println("Se realizo el Select");:}
            | inser {:System.out.println("Se realizo el insert");:}
            | actua {:System.out.println("Se realizo la actualizacion");:}
            | elim  {:System.out.println("Se realizo el eliminar");:};

selec::= SELECCIONAR columnas:colums EN path:path FILTRAR condiciones:condi PUNTOYCOMA
        |SELECCIONAR:selec columnas:colums EN path:path PUNTOYCOMA;

inser::= INSERTAR:inser EN path insercion VALORES:val insercion PUNTOYCOMA:pyc;

elim::= ELIMINAR EN path:path condiciones PUNTOYCOMA;

actua::= ACTUALIZAR EN path:path ASIGNAR actualizar condiciones PUNTOYCOMA;

columnas::= seleccion:selecColumnas
        | ASTERISCO ;

path::= PALABRA PUNTO PALABRA;

insercion::= PARENTESISA seleccion PARENTESISC;

seleccion::= seleccion COMA PALABRA
        | PALABRA;

condiciones::= condiciones:condiciones AND condicion:condi {:condiciones.addCondicional(condi);:}
            | condiciones:condiciones OR condicion:condi {:condiciones.addCondicional(condi);:}
            | condicion:condicion {:var condicionObjeto = new Condicion(); condicion.addConcional(condicion); RESULT = condicionObjeto; :};

condicion::= condicionalNumeros:cN {:RESULT= cN;:}
         | condicionPalabras:cP {:RESULT= cP;:};

actualizar::= actualizar COMA paraActualizar {:RESULT= pA;:}
        | paraActualizar:pA {:RESULT= pA;:};

paraActualizar::= asignacion {:RESULT= asignacion;:}
              | condicionPalabras {:RESULT = condicionPalabras;:};

asignacion::= PALABRA:palabra IGUAL:operador NUMERO:numero {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:};

condicionPalabras::= PALABRA:palabra IGUAL:operador COMILLAS PALABRA:palabra2 COMILLAS {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(palabra2.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:}
                 | PALABRA:palabra IGUAL:operador COMILLAS NUMERO:numero COMILLAS {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:};

condicionalNumeros::= asignacion {:RESULT= asignacion;:}
                    | PALABRA:palabra MAYORIGUALQUE:operador NUMERO:numero {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:}
                    | PALABRA MENORIGUALQUE:operador NUMERO {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:}
                    | PALABRA MAYORQUE:operador NUMERO {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:}
                    | PALABRA MENORQUE:operador NUMERO {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:}
                    | PALABRA DIFERENTE:operador NUMERO {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:};

diferencia::= PALABRA:palabra DIFERENTE:operador COMILLAS PALABRA:palabra2 COMILLAS {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(palabra2.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:}
            | PALABRA:palabra DIFERENTE:operador COMILLAS NUMERO:numero COMILLAS {:var condicional = new Condicional().builder().columna(palabra.toString()).operador(operador.toString()).valor(numero.toString()).buil(); condicional.addCondicional(condicional); RESULT = condicional;:};